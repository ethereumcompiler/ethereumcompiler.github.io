{"version":3,"sources":["C:/Users/guwno/Desktop/remix-project-master/node_modules/web3-shh/types/index.d.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,0cAA2Y,keAAke,UAAU,+CAA+C,kBAAkB,UAAU,UAAU,iBAAiB,sBAAsB,oBAAoB,sCAAsC,uDAAuD,oCAAoC,yCAAyC,2CAA2C,yCAAyC,2CAA2C,iDAAiD,0CAA0C,qBAAqB,wGAAwG,8EAA8E,uIAAuI,8HAA8H,sIAAsI,oFAAoF,2IAA2I,iIAAiI,8HAA8H,iIAAiI,mIAAmI,mFAAmF,4HAA4H,+IAA+I,6HAA6H,wHAAwH,gIAAgI,mJAAmJ,gPAAgP,qJAAqJ,sIAAsI,2IAA2I,GAAG,2BAA2B,uBAAuB,6BAA6B,qBAAqB,qBAAqB,GAAG,+BAA+B,mBAAmB,kBAAkB,oBAAoB,sBAAsB,uBAAuB,uBAAuB,yBAAyB,0BAA0B,GAAG,sDAAsD,uBAAuB,GAAG,sDAAsD,qBAAqB,GAAG,0CAA0C,wBAAwB,4BAA4B,mBAAmB,wBAAwB,sBAAsB,yBAAyB,mBAAmB,GAAG,mCAAmC,mBAAmB,mBAAmB,kCAAkC,wBAAwB,kBAAkB,oBAAoB,sBAAsB,sBAAsB,kBAAkB,GAAG,gCAAgC,oEAAoE,gEAAgE,GAAG,GAAG,E","file":"raw-loader!web3-shh-types-index-d-ts.0.26.0-dev.1661717561336.js","sourcesContent":["export default \"/*\\n    This file is part of web3.js.\\n    web3.js is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Lesser General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    web3.js is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Lesser General Public License for more details.\\n    You should have received a copy of the GNU Lesser General Public License\\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n/**\\n * @file index.d.ts\\n * @author Josh Stevens <joshstevens19@hotmail.co.uk>, Samuel Furter <samuel@ethereum.org>\\n * @date 2018\\n */\\n\\nimport * as net from 'net';\\nimport { BatchRequest, provider, Providers, Extension } from 'web3-core';\\nimport { Network } from 'web3-net';\\n\\nexport class Shh {\\n    constructor();\\n    constructor(provider: provider);\\n    constructor(provider: provider, net: net.Socket);\\n\\n    readonly givenProvider: any;\\n    static readonly givenProvider: any;\\n    static readonly providers: Providers;\\n    readonly currentProvider: provider;\\n    BatchRequest: new () => BatchRequest;\\n\\n    setProvider(provider: provider): boolean;\\n\\n    extend(extension: Extension): any;\\n\\n    net: Network;\\n\\n    getVersion(\\n        callback?: (error: Error, version: string) => void\\n    ): Promise<string>;\\n\\n    getInfo(callback?: (error: Error, info: Info) => void): Promise<Info>;\\n\\n    setMaxMessageSize(\\n        size: number,\\n        callback?: (error: Error, result: boolean) => void\\n    ): Promise<boolean>;\\n\\n    setMinPoW(\\n        pow: number,\\n        callback?: (error: Error, result: boolean) => void\\n    ): Promise<boolean>;\\n\\n    markTrustedPeer(\\n        enode: string,\\n        callback?: (error: Error, result: boolean) => void\\n    ): Promise<boolean>;\\n\\n    newKeyPair(callback?: (error: Error, key: string) => void): Promise<string>;\\n\\n    addPrivateKey(\\n        privateKey: string,\\n        callback?: (error: Error, privateKey: string) => void\\n    ): Promise<string>;\\n\\n    deleteKeyPair(\\n        id: string,\\n        callback?: (error: Error, result: boolean) => void\\n    ): Promise<boolean>;\\n\\n    hasKeyPair(\\n        id: string,\\n        callback?: (error: Error, result: boolean) => void\\n    ): Promise<boolean>;\\n\\n    getPublicKey(\\n        id: string,\\n        callback?: (error: Error, publicKey: string) => void\\n    ): Promise<string>;\\n\\n    getPrivateKey(\\n        id: string,\\n        callback?: (error: Error, privateKey: string) => void\\n    ): Promise<string>;\\n\\n    newSymKey(callback?: (error: Error, key: string) => void): Promise<string>;\\n\\n    addSymKey(\\n        symKey: string,\\n        callback?: (error: Error, key: string) => void\\n    ): Promise<string>;\\n\\n    generateSymKeyFromPassword(\\n        password: string,\\n        callback?: (error: Error, key: string) => void\\n    ): Promise<string>;\\n\\n    hasSymKey(\\n        id: string,\\n        callback?: (error: Error, result: boolean) => void\\n    ): Promise<boolean>;\\n\\n    getSymKey(\\n        id: string,\\n        callback?: (error: Error, key: string) => void\\n    ): Promise<string>;\\n\\n    deleteSymKey(\\n        id: string,\\n        callback?: (error: Error, result: boolean) => void\\n    ): Promise<boolean>;\\n\\n    post(\\n        object: PostWithSymKey | PostWithPubKey,\\n        callback?: (error: Error, result: string) => void\\n    ): Promise<string>;\\n\\n    subscribe(\\n        string: 'messages',\\n        options: SubscriptionOptions,\\n        callback?: (\\n            error: Error,\\n            message: Notification,\\n            subscription: any\\n        ) => void\\n    ): Subscribe;\\n\\n    newMessageFilter(\\n        options?: SubscriptionOptions,\\n        callback?: (error: Error, result: string) => void\\n    ): Promise<string>;\\n\\n    deleteMessageFilter(\\n        id: string,\\n        callback?: (error: Error, result: string) => void\\n    ): Promise<boolean>;\\n\\n    getFilterMessages(\\n        id: string,\\n        callback?: (error: Error, result: string) => void\\n    ): Promise<Notification[]>;\\n}\\n\\nexport interface Info {\\n    messages: number;\\n    maxMessageSize: number;\\n    memory: number;\\n    minPow: number;\\n}\\n\\nexport interface PostBase {\\n    sig?: string;\\n    ttl: number;\\n    topic: string;\\n    payload: string;\\n    padding?: number;\\n    powTime?: number;\\n    powTarget?: number;\\n    targetPeer?: number;\\n}\\n\\nexport interface PostWithSymKey extends PostBase {\\n    symKeyID: string;\\n}\\n\\nexport interface PostWithPubKey extends PostBase {\\n    pubKey: string;\\n}\\n\\nexport interface SubscriptionOptions {\\n    symKeyID?: string;\\n    privateKeyID?: string;\\n    sig?: string;\\n    topics?: string[];\\n    minPow?: number;\\n    allowP2P?: boolean;\\n    ttl?: number;\\n}\\n\\nexport interface Notification {\\n    hash: string;\\n    sig?: string;\\n    recipientPublicKey?: string;\\n    timestamp: string;\\n    ttl: number;\\n    topic: string;\\n    payload: string;\\n    padding: number;\\n    pow: number;\\n}\\n\\nexport interface Subscribe {\\n    on(type: 'data', handler: (data: Notification) => void): void;\\n\\n    on(type: 'error', handler: (data: Error) => void): void;\\n}\\n\";"],"sourceRoot":"webpack:///"}