{"version":3,"sources":["C:/Users/guwno/Desktop/remix-project-master/node_modules/@ethersproject/abstract-signer/lib/index.d.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,wEAAS,uEAAuE,2CAA2C,UAAU,0BAA0B,mCAAmC,UAAU,mBAAmB,+BAA+B,UAAU,aAAa,oCAAoC,oCAAoC,oBAAoB,uBAAuB,6BAA6B,iCAAiC,uBAAuB,GAAG,mCAAmC,mBAAmB,mBAAmB,GAAG,2CAA2C,+BAA+B,kCAAkC,GAAG,oCAAoC,yIAAyI,GAAG,wCAAwC,mCAAmC,6CAA6C,qEAAqE,6FAA6F,mDAAmD,kCAAkC,oBAAoB,0DAA0D,gEAAgE,mFAAmF,8FAA8F,iGAAiG,oCAAoC,wCAAwC,qCAAqC,iDAAiD,oGAAoG,oGAAoG,+CAA+C,mDAAmD,GAAG,6EAA6E,+BAA+B,wDAAwD,oCAAoC,8DAA8D,4DAA4D,oFAAoF,yIAAyI,8CAA8C,GAAG,sCAAsC,E","file":"raw-loader!-ethersproject-abstract-signer-lib-index-d-ts.0.26.0-dev.1661717561336.js","sourcesContent":["export default \"import { BlockTag, FeeData, Provider, TransactionRequest, TransactionResponse } from \\\"@ethersproject/abstract-provider\\\";\\nimport { BigNumber, BigNumberish } from \\\"@ethersproject/bignumber\\\";\\nimport { Bytes, BytesLike } from \\\"@ethersproject/bytes\\\";\\nimport { Deferrable } from \\\"@ethersproject/properties\\\";\\nexport interface TypedDataDomain {\\n    name?: string;\\n    version?: string;\\n    chainId?: BigNumberish;\\n    verifyingContract?: string;\\n    salt?: BytesLike;\\n}\\nexport interface TypedDataField {\\n    name: string;\\n    type: string;\\n}\\nexport interface ExternallyOwnedAccount {\\n    readonly address: string;\\n    readonly privateKey: string;\\n}\\nexport interface TypedDataSigner {\\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\\n}\\nexport declare abstract class Signer {\\n    readonly provider?: Provider;\\n    abstract getAddress(): Promise<string>;\\n    abstract signMessage(message: Bytes | string): Promise<string>;\\n    abstract signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;\\n    abstract connect(provider: Provider): Signer;\\n    readonly _isSigner: boolean;\\n    constructor();\\n    getBalance(blockTag?: BlockTag): Promise<BigNumber>;\\n    getTransactionCount(blockTag?: BlockTag): Promise<number>;\\n    estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>;\\n    call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag): Promise<string>;\\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse>;\\n    getChainId(): Promise<number>;\\n    getGasPrice(): Promise<BigNumber>;\\n    getFeeData(): Promise<FeeData>;\\n    resolveName(name: string): Promise<string>;\\n    checkTransaction(transaction: Deferrable<TransactionRequest>): Deferrable<TransactionRequest>;\\n    populateTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionRequest>;\\n    _checkProvider(operation?: string): void;\\n    static isSigner(value: any): value is Signer;\\n}\\nexport declare class VoidSigner extends Signer implements TypedDataSigner {\\n    readonly address: string;\\n    constructor(address: string, provider?: Provider);\\n    getAddress(): Promise<string>;\\n    _fail(message: string, operation: string): Promise<any>;\\n    signMessage(message: Bytes | string): Promise<string>;\\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;\\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\\n    connect(provider: Provider): VoidSigner;\\n}\\n//# sourceMappingURL=index.d.ts.map\";"],"sourceRoot":"webpack:///"}